package com.tuxdave.AnimeDownloader.graphics;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.tuxdave.AnimeDownloader.logic.Anime;
import com.tuxdave.AnimeDownloader.logic.ParseAnimeWorld;
import com.tuxdave.JComponents.JPlaceHolderTextField;
import com.tuxdave.JComponents.JRangePicker;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;

public class AnimeDownloader extends JFrame {
    private JPanel panel1;
    private JLabel info2;
    private JTextField info3;
    private JLabel info1;
    private JTextArea showLinkArea;
    private JButton copiaButton;
    private JButton saveButton;
    private JPlaceHolderTextField linkEdit;
    private JButton downloadButton;
    private JProgressBar progressBar1;
    private JButton findEpisodesButton;
    private JScrollPane scrollPane;
    private JTextPane info4;
    private JButton searchButton;

    private boolean working = false;

    //START AUTOGENERATED CODE

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 3, new Insets(2, 2, 2, 2), -1, -1));
        panel1.setBackground(new Color(-4390921));
        Font panel1Font = this.$$$getFont$$$("Ubuntu", Font.PLAIN, 14, panel1.getFont());
        if (panel1Font != null) panel1.setFont(panel1Font);
        info2 = new JLabel();
        Font info2Font = this.$$$getFont$$$("Ubuntu", Font.PLAIN, 14, info2.getFont());
        if (info2Font != null) info2.setFont(info2Font);
        info2.setText("Inserisci il link della serie Anime o cerca una serie tramite il bottone:");
        panel1.add(info2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        info1 = new JLabel();
        info1.setBackground(new Color(-1));
        Font info1Font = this.$$$getFont$$$("Ubuntu", Font.PLAIN, 14, info1.getFont());
        if (info1Font != null) info1.setFont(info1Font);
        info1.setForeground(new Color(-16777216));
        info1.setText("Recupera il link della serie Anime da Qui  (Occhio alle publicitÃ ) Click->");
        panel1.add(info1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        info3 = new JTextField();
        info3.setBackground(new Color(-1));
        info3.setEditable(false);
        Font info3Font = this.$$$getFont$$$("Ubuntu", Font.PLAIN, 14, info3.getFont());
        if (info3Font != null) info3.setFont(info3Font);
        info3.setForeground(new Color(-9613313));
        info3.setText("https://www.animeworld.tv/");
        panel1.add(info3, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        saveButton = new JButton();
        Font saveButtonFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, saveButton.getFont());
        if (saveButtonFont != null) saveButton.setFont(saveButtonFont);
        saveButton.setText("Salva links su file!");
        panel2.add(saveButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        copiaButton = new JButton();
        Font copiaButtonFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, copiaButton.getFont());
        if (copiaButtonFont != null) copiaButton.setFont(copiaButtonFont);
        copiaButton.setText("Copia!");
        panel2.add(copiaButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        downloadButton = new JButton();
        downloadButton.setEnabled(false);
        Font downloadButtonFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, downloadButton.getFont());
        if (downloadButtonFont != null) downloadButton.setFont(downloadButtonFont);
        downloadButton.setHideActionText(false);
        downloadButton.setIcon(new ImageIcon(getClass().getResource("/icons/download.png")));
        downloadButton.setText("Download Episodi");
        panel2.add(downloadButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        info4 = new JTextPane();
        info4.setBackground(new Color(-4390921));
        info4.setEditable(false);
        info4.setText("Info: ");
        panel2.add(info4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 300), new Dimension(150, 50), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        progressBar1 = new JProgressBar();
        panel1.add(progressBar1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        findEpisodesButton = new JButton();
        findEpisodesButton.setText("Trova Episodi!");
        panel1.add(findEpisodesButton, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollPane = new JScrollPane();
        panel1.add(scrollPane, new GridConstraints(3, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(400, 500), null, null, 0, false));
        showLinkArea = new JTextArea();
        showLinkArea.setEditable(false);
        Font showLinkAreaFont = this.$$$getFont$$$("Ubuntu", Font.PLAIN, 14, showLinkArea.getFont());
        if (showLinkAreaFont != null) showLinkArea.setFont(showLinkAreaFont);
        showLinkArea.setLineWrap(false);
        showLinkArea.setOpaque(true);
        showLinkArea.setText("");
        scrollPane.setViewportView(showLinkArea);
        linkEdit = new JPlaceHolderTextField();
        Font linkEditFont = this.$$$getFont$$$("Ubuntu", Font.PLAIN, 14, linkEdit.getFont());
        if (linkEditFont != null) linkEdit.setFont(linkEditFont);
        linkEdit.setPlaceHolder("https://www.animeworld.tv/...");
        panel1.add(linkEdit, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(290, -1), null, 0, false));
        searchButton = new JButton();
        searchButton.setIcon(new ImageIcon(getClass().getResource("/icons/search.png")));
        searchButton.setText("");
        panel1.add(searchButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(19, 19), new Dimension(19, 19), new Dimension(19, 19), 0, false));
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    //END AUTOGENERATED CODE

    {//setup JFrame
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        add(panel1);
        setResizable(false);
        setTitle("AnimeDownloader");
    }

    {//insert listeners
        AnimeDownloaderListener listener = new AnimeDownloaderListener();
        findEpisodesButton.addActionListener(listener);
        findEpisodesButton.addMouseListener(listener);
        copiaButton.addMouseListener(listener);
        copiaButton.addActionListener(listener);
        saveButton.addActionListener(listener);
        saveButton.addMouseListener(listener);
        downloadButton.addMouseListener(listener);
        downloadButton.addActionListener(listener);
        progressBar1.addMouseListener(listener);
        linkEdit.addMouseListener(listener);
        info3.addMouseListener(listener);
        showLinkArea.addMouseListener(listener);
        searchButton.addMouseListener(listener);
        searchButton.addActionListener(listener);
    }

    private class AnimeDownloaderListener implements ActionListener, MouseListener {

        private ParseAnimeWorld parser = null;
        private String[] links = null;

        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            if (actionEvent.getSource() == findEpisodesButton && !working) {
                working = true;
                linkEdit.setBackground(Color.WHITE);
                progressBar1.setValue(0);
                try {
                    parser = new ParseAnimeWorld(linkEdit.getText());
                    try {
                        links = new String[0];
                        parser.scrapeAllEpisodeDownloadLink();
                        showLinkArea.setText("");
                    } catch (IllegalArgumentException | IOException ignored) {
                    } finally {
                        new Thread() {
                            @Override
                            public void run() {
                                downloadButton.setEnabled(false);
                                super.run();
                                while (parser.isScraping()) {
                                    progressBar1.setValue(parser.getCurrent() * 100 / parser.getEpisodes());
                                    try {
                                        Thread.sleep(500);
                                    } catch (InterruptedException ignored) {
                                    }
                                }
                                links = parser.getAllEpisodeDownloadLink();
                                showLinkArea.setText("");
                                int c = 1;
                                for (String s1 : links) {
                                    if (s1 == null || s1.equals("")) {
                                        JOptionPane.showMessageDialog(panel1, "Impossibile visualizzare episodio " + c + " da animeworld.tv\nvisualizzarlo su altri servizi di streaming/download");
                                    } else
                                        showLinkArea.append(s1 + "\n");
                                    c++;
                                }
                                progressBar1.setValue(100);
                                downloadButton.setEnabled(true);
                            }
                        }.start();
                    }

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(panel1, "Impossibile trovare una serie Anime all'indirizzo specificato");
                    linkEdit.setBackground(Color.RED);
                }
                working = false;
            }
            if (actionEvent.getSource() == copiaButton) {
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
                        new StringSelection(showLinkArea.getText()),
                        null
                );
            }
            if (actionEvent.getSource() == saveButton) {
                final JFrame f = new JFrame();
                final JFileChooser chooser = new JFileChooser();
                chooser.setName("Salva File");
                chooser.setDialogType(1);
                chooser.setVisible(true);
                chooser.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent actionEvent) {
                        FileWriter fw = null;
                        try {
                            fw = new FileWriter(chooser.getSelectedFile());
                            BufferedWriter bf = new BufferedWriter(fw);
                            bf.write(showLinkArea.getText());
                            bf.close();
                            fw.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        f.setVisible(false);
                    }
                });
                f.add(chooser);
                f.pack();
                f.setVisible(true);
            }
            if (actionEvent.getSource() == downloadButton && !ParseAnimeWorld.isDownloading()) {
                //richiesta posizione per il download
                DownloadSelector ds = new DownloadSelector();
                String path = ds.getPath();
                //richiesta quali episodi da scaricare
                JRangePicker r = new JRangePicker(1, parser.getEpisodes());
                JOptionPane.showMessageDialog(panel1, r, "Selezionare quali episodi scaricare!", JOptionPane.INFORMATION_MESSAGE);
                final int[] range = r.getRange();
                //download degli episodi
                ParseAnimeWorld.EpisodesDownloader ed = new ParseAnimeWorld.EpisodesDownloader(links, path, parser.getAnimeName(), range[0], range[1]);
                ed.start();
                findEpisodesButton.setEnabled(false);
                try {
                    Thread.sleep(500); //per dare tempo al download di avviarsi
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                new Thread() {
                    @Override
                    public void run() {
                        super.run();
                        downloadButton.setEnabled(false);
                        progressBar1.setString("Downloading...");
                        progressBar1.setStringPainted(true);
                        while (ParseAnimeWorld.isDownloading()) {
                            progressBar1.setValue((ParseAnimeWorld.getCurrentDownloading() - range[0] + 1) * 100 / (range[1] - range[0] + 1));
                            try {
                                Thread.sleep(200);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                        findEpisodesButton.setEnabled(true);
                        progressBar1.setString("Finito!!");
                        try {
                            Thread.sleep(3000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        progressBar1.setStringPainted(false);
                        progressBar1.setValue(0);
                        downloadButton.setEnabled(true);
                    }
                }.start();
            }
            if (actionEvent.getSource() == searchButton) {
                AnimeSearcherGUI searcher = new AnimeSearcherGUI();
                JOptionPane.showMessageDialog(panel1, searcher, "Cerca e Seleziona un anime...", JOptionPane.INFORMATION_MESSAGE);
                Anime anime = searcher.getSelected();
                if (anime.getLink() != null)
                    linkEdit.setText(anime.getLink().toString());
                else
                    linkEdit.setText("");
            }
        }

        @Override
        public void mouseClicked(MouseEvent mouseEvent) {
            if (mouseEvent.getSource() == info3) {
                try {
                    Desktop.getDesktop().browse(new URI(info3.getText()));
                } catch (IOException | URISyntaxException e) {
                    //todo: Mettere qui un dialog per chiedere se si ha un browser predefinito
                }
            }
        }

        //Implementazioni obbligatorie ma non implementate volutamente
        @Override
        public void mousePressed(MouseEvent mouseEvent) {

        }

        @Override
        public void mouseReleased(MouseEvent mouseEvent) {

        }

        @Override
        public void mouseEntered(MouseEvent mouseEvent) {
            if (mouseEvent.getSource() == findEpisodesButton) {
                info4.setText("Info: Scarica i link dai quali scaricare tutti gli episodi dell'anime desiderato.");
            } else if (mouseEvent.getSource() == copiaButton) {
                info4.setText("Info: Copia in memoria tutti i link per poterli incollare all'interno di un download manager (es: downloadBox remota).");
            } else if (mouseEvent.getSource() == saveButton) {
                info4.setText("Info: Chiede dove salvare i links per il download degli episodi.");
            } else if (mouseEvent.getSource() == downloadButton) {
                info4.setText("Info: Chiede dove salvare gli episodi da scaricare, e li scarica nella posizione desiderata.");
            } else if (mouseEvent.getSource() == linkEdit) {
                info4.setText("Incollare qui il link della pagina di AnimeWorld.tv dell'Anime desiderato.");
            } else if (mouseEvent.getSource() == linkEdit) {
                info4.setText("Incollare qui il link della pagina di AnimeWorld.tv dell'Anime desiderato.");
            } else if (mouseEvent.getSource() == info3) {
                info4.setText("Info: Posta alla pagina AnimeWorld.tv per scegliere l'anime da scaricare e copiare l'URL.");
            } else if (mouseEvent.getSource() == progressBar1) {
                info4.setText("Info: Indica la percentuale di completamento di download dei link o degli episodi.");
            } else if (mouseEvent.getSource() == showLinkArea) {
                info4.setText("Info: Qui compariranno i link per il download di tutti gli episodi dell'anime indicato sopra, possono essere copiati, salvati o scaricati sul computer.");
            } else if (mouseEvent.getSource() == searchButton) {
                info4.setText("Info: Apre una finestra dalla quale Ã¨ possibile cercare una seria anime tra il catalogo disponibile su AnimeWorld.tv");
            }
        }

        @Override
        public void mouseExited(MouseEvent mouseEvent) {
            info4.setText("");
        }
    }

    public static void main(String[] args) {
        System.out.println("---AnimeDownloader---\n\n");

        AnimeDownloader a = new AnimeDownloader();
        a.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        a.setVisible(true);
        a.pack();
    }
}