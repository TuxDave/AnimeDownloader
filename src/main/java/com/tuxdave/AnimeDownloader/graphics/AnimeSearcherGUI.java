package com.tuxdave.AnimeDownloader.graphics;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.tuxdave.AnimeDownloader.logic.Anime;
import com.tuxdave.AnimeDownloader.logic.ParseAnimeWorld;
import com.tuxdave.JComponents.JPlaceHolderTextField;

import javax.swing.*;
import javax.swing.event.PopupMenuListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Locale;

public class AnimeSearcherGUI extends JPanel {
    private JPanel panel1;
    private JButton searchButton;
    private JComboBox<Anime> chooseBox1;
    private VisualAnimeForm visualAnime1;
    private JPlaceHolderTextField searchEdit;

    Anime[] animes = null;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        searchEdit = new com.tuxdave.JComponents.JPlaceHolderTextField();
        panel1.add(searchEdit, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(250, -1), null, null, 0, false));
        chooseBox1 = new JComboBox();
        Font chooseBox1Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, chooseBox1.getFont());
        if (chooseBox1Font != null) chooseBox1.setFont(chooseBox1Font);
        panel1.add(chooseBox1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(250, -1), null, null, 0, false));
        searchButton = new JButton();
        searchButton.setIcon(new ImageIcon(getClass().getResource("/icons/search.png")));
        searchButton.setText("");
        panel1.add(searchButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(19, 19), new Dimension(19, 19), new Dimension(19, 19), 0, false));
        visualAnime1 = new VisualAnimeForm();
        panel1.add(visualAnime1.$$$getRootComponent$$$(), new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    {
        add(panel1);

        //Aggiunta listener
        AnimeSearcherListener listener = new AnimeSearcherListener();
        searchButton.addActionListener(listener);
        chooseBox1.addActionListener(listener);
    }

    public Anime getSelected() {
        return (Anime) chooseBox1.getSelectedItem();
    }

    private class AnimeSearcherListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            if (actionEvent.getSource() == searchButton) {
                animes = new Anime[]{null};
                final ParseAnimeWorld.AnimeSearcher[] searcher = {null};
                try {
                    searcher[0] = new ParseAnimeWorld.AnimeSearcher(searchEdit.getText());
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(panel1, e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
                    return; //per fermare la funzione
                }

                searcher[0].search();

                //costruzione pannello temporaneo
                final JFrame fTemp = new JFrame();
                final JProgressBar prog = new JProgressBar();
                prog.setValue(0);
                prog.setString("Searching...");
                prog.setStringPainted(true);
                fTemp.add(prog);
                fTemp.pack();
                fTemp.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                fTemp.setVisible(true);
                fTemp.transferFocus();

                new Thread() {
                    @Override
                    public void run() {
                        super.run();
                        try {
                            int n = ParseAnimeWorld.AnimeSearcher.getAnimeFoundNumber();
                            while (ParseAnimeWorld.AnimeSearcher.isSearching()) {
                                prog.setValue(ParseAnimeWorld.AnimeSearcher.getCurrentFound() * 100 / n);
                                Thread.sleep(200);
                            }
                            prog.setValue(100);
                            fTemp.setVisible(false);

                            //searching finished.
                            animes = searcher[0].getFound();
                            chooseBox1.removeAllItems();
                            for (Anime anime : animes) {
                                chooseBox1.addItem(anime);
                            }
                        } catch (InterruptedException ignored) {
                        }
                    }
                }.start();
                //per portare in primo piano
                fTemp.toFront();
                fTemp.repaint();
            } else if (actionEvent.getSource() == chooseBox1) {
                visualAnime1.setAnime((Anime) chooseBox1.getSelectedItem());
                System.out.println(((Anime) chooseBox1.getSelectedItem()).getEpisodeLength());
            }
        }
    }
}
